// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: service/frontend/thread/v2/thread.proto

package thread

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThreadService_GetParentThreads_FullMethodName = "/core.service.frontend.thread.v2.ThreadService/GetParentThreads"
	ThreadService_GetSubThreads_FullMethodName    = "/core.service.frontend.thread.v2.ThreadService/GetSubThreads"
	ThreadService_GetThread_FullMethodName        = "/core.service.frontend.thread.v2.ThreadService/GetThread"
	ThreadService_SaveThread_FullMethodName       = "/core.service.frontend.thread.v2.ThreadService/SaveThread"
	ThreadService_SaveUpvote_FullMethodName       = "/core.service.frontend.thread.v2.ThreadService/SaveUpvote"
)

// ThreadServiceClient is the client API for ThreadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadServiceClient interface {
	GetParentThreads(ctx context.Context, in *GetParentThreadsRequest, opts ...grpc.CallOption) (*GetParentThreadsResponse, error)
	GetSubThreads(ctx context.Context, in *GetSubThreadsRequest, opts ...grpc.CallOption) (*GetSubThreadsResponse, error)
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadResponse, error)
	SaveThread(ctx context.Context, in *SaveThreadRequest, opts ...grpc.CallOption) (*SaveThreadResponse, error)
	SaveUpvote(ctx context.Context, in *SaveUpvoteRequest, opts ...grpc.CallOption) (*SaveUpvoteResponse, error)
}

type threadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadServiceClient(cc grpc.ClientConnInterface) ThreadServiceClient {
	return &threadServiceClient{cc}
}

func (c *threadServiceClient) GetParentThreads(ctx context.Context, in *GetParentThreadsRequest, opts ...grpc.CallOption) (*GetParentThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParentThreadsResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetParentThreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetSubThreads(ctx context.Context, in *GetSubThreadsRequest, opts ...grpc.CallOption) (*GetSubThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubThreadsResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetSubThreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThreadResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) SaveThread(ctx context.Context, in *SaveThreadRequest, opts ...grpc.CallOption) (*SaveThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveThreadResponse)
	err := c.cc.Invoke(ctx, ThreadService_SaveThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) SaveUpvote(ctx context.Context, in *SaveUpvoteRequest, opts ...grpc.CallOption) (*SaveUpvoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveUpvoteResponse)
	err := c.cc.Invoke(ctx, ThreadService_SaveUpvote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadServiceServer is the server API for ThreadService service.
// All implementations must embed UnimplementedThreadServiceServer
// for forward compatibility.
type ThreadServiceServer interface {
	GetParentThreads(context.Context, *GetParentThreadsRequest) (*GetParentThreadsResponse, error)
	GetSubThreads(context.Context, *GetSubThreadsRequest) (*GetSubThreadsResponse, error)
	GetThread(context.Context, *GetThreadRequest) (*GetThreadResponse, error)
	SaveThread(context.Context, *SaveThreadRequest) (*SaveThreadResponse, error)
	SaveUpvote(context.Context, *SaveUpvoteRequest) (*SaveUpvoteResponse, error)
	mustEmbedUnimplementedThreadServiceServer()
}

// UnimplementedThreadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThreadServiceServer struct{}

func (UnimplementedThreadServiceServer) GetParentThreads(context.Context, *GetParentThreadsRequest) (*GetParentThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentThreads not implemented")
}
func (UnimplementedThreadServiceServer) GetSubThreads(context.Context, *GetSubThreadsRequest) (*GetSubThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubThreads not implemented")
}
func (UnimplementedThreadServiceServer) GetThread(context.Context, *GetThreadRequest) (*GetThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedThreadServiceServer) SaveThread(context.Context, *SaveThreadRequest) (*SaveThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveThread not implemented")
}
func (UnimplementedThreadServiceServer) SaveUpvote(context.Context, *SaveUpvoteRequest) (*SaveUpvoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUpvote not implemented")
}
func (UnimplementedThreadServiceServer) mustEmbedUnimplementedThreadServiceServer() {}
func (UnimplementedThreadServiceServer) testEmbeddedByValue()                       {}

// UnsafeThreadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadServiceServer will
// result in compilation errors.
type UnsafeThreadServiceServer interface {
	mustEmbedUnimplementedThreadServiceServer()
}

func RegisterThreadServiceServer(s grpc.ServiceRegistrar, srv ThreadServiceServer) {
	// If the following call pancis, it indicates UnimplementedThreadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThreadService_ServiceDesc, srv)
}

func _ThreadService_GetParentThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParentThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetParentThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetParentThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetParentThreads(ctx, req.(*GetParentThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetSubThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetSubThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetSubThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetSubThreads(ctx, req.(*GetSubThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_SaveThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).SaveThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_SaveThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).SaveThread(ctx, req.(*SaveThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_SaveUpvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).SaveUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_SaveUpvote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).SaveUpvote(ctx, req.(*SaveUpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreadService_ServiceDesc is the grpc.ServiceDesc for ThreadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.service.frontend.thread.v2.ThreadService",
	HandlerType: (*ThreadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParentThreads",
			Handler:    _ThreadService_GetParentThreads_Handler,
		},
		{
			MethodName: "GetSubThreads",
			Handler:    _ThreadService_GetSubThreads_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _ThreadService_GetThread_Handler,
		},
		{
			MethodName: "SaveThread",
			Handler:    _ThreadService_SaveThread_Handler,
		},
		{
			MethodName: "SaveUpvote",
			Handler:    _ThreadService_SaveUpvote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/frontend/thread/v2/thread.proto",
}
